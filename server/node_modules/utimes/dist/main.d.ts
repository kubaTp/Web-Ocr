/**
 * Updates the timestamps on the given path(s).
 *
 * If a `callback` function is provided, it will be invoked after the operation completes with an optional error
 * argument. Otherwise, a promise will be returned.
 *
 * @param path
 * @param options
 * @param callback
 */
export declare function utimes(path: Paths, options: TimeOptions): Promise<void>;
export declare function utimes(path: Paths, options: TimeOptions, callback: Callback): void;
/**
 * Synchronously updates the timestamps on the given path(s).
 *
 * @param path
 * @param options
 */
export declare function utimesSync(path: Paths, options: TimeOptions): void;
/**
 * Updates the timestamps on the given path(s). If the path(s) point to a symbolic link, then the timestamps of
 * the symbolic link itself are changed.
 *
 * If a `callback` function is provided, it will be invoked after the operation completes with an optional error
 * argument. Otherwise, a promise will be returned.
 *
 * @param path
 * @param options
 * @param callback
 */
export declare function lutimes(path: Paths, options: TimeOptions): Promise<void>;
export declare function lutimes(path: Paths, options: TimeOptions, callback: Callback): void;
/**
 * Synchronously updates the timestamps on the given path(s).
 *
 * @param path
 * @param options
 */
export declare function lutimesSync(path: Paths, options: TimeOptions): void;
/**
 * Options for choosing which timestamps to set on files. You can supply a single number to set that as the
 * timestamp for all three, or supply individual timestamps within an object.
 */
export declare type TimeOptions = number | null | undefined | Partial<NormalizedTimeOptions>;
declare type Paths = string | string[];
declare type Callback = (error?: Error) => void;
declare type NormalizedTimeOptions = {
    /**
     * The birth time in milliseconds.
     */
    btime: number;
    /**
     * The modification time in milliseconds.
     */
    mtime: number;
    /**
     * The access time in milliseconds.
     */
    atime: number;
};
export {};
